#Renaud Lizot
#14509956
#px11-1

L'exercice consiste à créer une fonction pluriel() qui gère les pluriels réguliers et irréguliers.

ANALYSE
-------

Une série de if en escalier permettront de tester chaque terminaison de mot (de 3 à 1 lettres) pour y attribuer la forme du pluriel correspondant.
On commencera par les terminaisons à 3 lettres (-eau ; -uil etc.) pour descendre graduellement vers les terminaisons à 1 lettre (-e, -t, -r, etc.) On testera avant tout les exceptions pour chaque cas de terminaison afin d’éviter les redondances.


CODE
----

STRUCTURE
Pour pouvoir tester chaque cas de figure tout en évitant les redondances, on choisit une série d'if en escalier accompagnée de elif (else if) afin de verrouiller la valeur de retour dès la première condition if... True rencontrée.
Les exceptions seront testées en tête de la fonction pour ces mêmes raisons.

Donc on aura, pour chaque type de terminaison:
1er niveau: test si mot parmi exceptions: si vrai alors return terminaison correspondante
2eme niveau: sinon, tests sur autres terminaisons de mot (en allant de 3 à 1 lettres finales)

GESTION DES CAS PARTICULIERS
Pour les cas très particuliers (yeux, aulx, cieux, aïeux), je préfère créer une liste nommée exceptions, contenant les mots au singulier suivi de leur pluriel. La fonction index() appliquée sur la liste exceptions permettra de trouver la position de ce pluriel (index(mot) +1) et donc de sortir ce dernier de la liste grâce a liste[liste.index(mot)+1]
Pour les autres cas particuliers, on teste si mot est dans la liste correspondante : si oui alors on retourne la terminaison correspondante.

GESTION DES CAS COURANTS
On peut faire des listes plus larges puisque les exceptions sont déjà couvertes plus haut dans le code (-eil, -iel, -ail, etc). Idem on commence par les 3 dernières lettres de mot puis on descend vers la dernière lettre de façon à couvrir toutes les possibilités.

GESTION DES ACCENTS
Copié tel quel dans le terminal, le code ci-dessous passera les mots contenant des glyphes et retournera leur valeur unicode. Le codage de python est expliqué plus loin dans le cours C'est pourquoi à ce point (et depuis le début), j'ai opté pour un fichier exécutable *.py (sous kubuntu, il suffit de préciser un open with par défaut).
Pour simplifier, on utilisera un fichier executable px11-1.py qui comprendra la ligne: #-*-coding: utf-8 -*- en en-tête afin d'afficher correctement les accents.

Notes : Il n'est pas possible, sans contexte, de traiter des cas particuliers des mots à double pluriels, tels que ail → aulx/ails (plus courant en botanique), ciel → ciels/cieux, banal → banals/banaux (sens différent). Concernant les mots composés, les règles sont plus compliquées et seraient à gérer quasiment au cas par cas.

En principe le code ressemblerait a cela:

>>> def pluriel(mot):
...     exceptions = ['oeil', 'yeux', 'œil', 'yeux', 'ail', 'aulx', 'vieil', 'vieux', 'ciel', 'cieux', 'aïeul', 'aïeux']
...     if mot in exceptions: return exceptions[exceptions.index(mot) +1]
...     elif mot in ['bleu', 'pneu', 'emeu', 'bancal', 'banal', 'portail', 'étal', 'serval', 'caracal', 'régal', 'naval', 'glacial', 'natal', 'bal', 'carnaval', 'chacal', 'festival', 'récital']: return mot + 's'
...     elif mot in ['hibou', 'pou', 'caillou', 'genou', 'bijou', 'joujou', 'chou']: return mot + 'x'
...     elif mot in ['bail', 'corail', 'émail', 'soupirail', 'travail', 'vantail', 'vitrail', 'bétail', 'portail']: 
...             if mot == 'bétail': return 'bestiaux'
...             else: return mot[0:-2] + 'ux'
...     else: 
...             if mot[-3:] == 'eau': return mot + 'x'
...             elif mot[-3:] in ['eil', 'iel', 'eul', 'ail', 'uil']: return mot + 's'
...             else: 
...                     if mot[-2:] == 'al': return mot[0:-2] + 'aux'
...                     elif mot[-2:] == 'eu': return mot + 'x'
...                     elif mot[-2:] in ['ou', 'au', 'el', 'il', 'ru', 'tu', 'pu', 'su', 'du', 'lu', 'vu', 'nu', 'mu']: return mot + 's'
...                     else:
...                             if mot[-1] in ['z', 'x', 's']: return mot
...                             else: return mot + 's'
... 
>>> while 1:
...     mot = raw_input('Mot:      ').lower()
...     if mot.lower() in ['q', 'exit', 'quit']: break    
...     print 'Pluriel: ', pluriel(mot)
>>>

NOTES
La boucle finale est un 'gadget' de comfort pour pouvoir entrer des mots à la chaîne. Pour en sortir, il faut entrer un mot clé. 
La variable mot est la valeur entrée par l'utilisateur mise en minuscule.
J'ai aussi ajouté 'oeil' sans 
