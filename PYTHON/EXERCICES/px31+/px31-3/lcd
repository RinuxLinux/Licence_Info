#! /usr/bin/env python
#-*-coding : utf-8 -*-
# px31-3 LCD

from Tkinter import *
from sys import argv

# PARAMETRES GLOBAUX

try:
	zoom = int(argv[2])
except:
	zoom = 0
mot = argv[1]

t = 1 + zoom/100.		# coef zoom

offset = 70*t
ep = 10*t
remplissage = '"red"'	# attention : une chaine dans une chaine
bordure = '"white"'
decal = 20*t

x = 10*t 				# x de reference
y = 10*t 				# y de reference
s = 40*t			 	# size
e = ep/2.				# espacement
bord = 2*t

coef_h = y + s*2 + 3*e		# coef hauteur cadre
coef_w= (s + 2*ep + decal)*len(mot) + x 		# coef largeur cadre (nbr lettres)

segments = \
[ # X1, Y1, X2, Y2, X3, Y3, X4, Y4, X5, Y5, X6, Y6
	[x + e, y - e, x, y, x + e, y + e, x + e + s, y + e, x + 2*e + s, y, x + e + s, y - e], 																				#0
	[x + e, y + e + s, x, y + 2*e + s, x + e, y + 3*e + s, x + s/2., y + 3*e + s, x + e + s/2., y + 2*e + s, x + s/2., y + e + s], 											#1
	[x + 2*e + s/2., y + e + s, x + e + s/2., y + 2*e + s, x + 2*e + s/2., y + 3*e + s, x + e + s, y + 3*e + s, x + 2*e + s, y + 2*e + s, x + e + s, y + e + s],			#2
	[x + e + s, y + 3*e + 2*s, x + 2*e + s, y + 4*e + 2*s, x + e + s, y + 5*e + 2*s, x + e, y + 5*e + 2*s, x, y + 4*e + 2*s, x + e, y + 3*e + 2*s], 						#3
	[x - e, y + e, x, y,  x + e, y + e, x + e, y + e + s,  x, y + 2*e + s, x - e, y + e + s], 																				#4
	[x - e, y + 3*e + s, x, y + 2*e + s, x + e, y + 3*e + s, x + e, y + 3*e + 2*s, x, y + 4*e + 2*s, x - e, y + 3*e + 2*s], 												#5
	[x + e + s, y + e, x + 2*e + s, y, x + 3*e + s, y + e, x + 3*e + s, y + e + s, x + 2*e + s, y + 2*e + s, x + e + s, y + e + s], 										#6
	[x + e + s, y + 3*e + s, x + 2*e + s, y + 2*e + s, x + 3*e + s, y + 3*e + s, x + 3*e + s, y + 3*e + 2*s, x + 2*e + s, y + 4*e + 2*s, x + e + s, y + 3*e + 2*s], 		#7
	[x, y + e, x, y, x + e, y, x + e + s/2., y + e + s, x + e + s/2., y + 2*e + s, x + s/2., y + 2*e + s], 																	#8
	[x + s/2., y + e, x + e + s/2., y, x + 2*e + s/2., y + e, x + 2*e + s/2., y + e + s, x + e + s/2., y + 2*e + s, x + s/2., y + e + s], 									#9
	[x + e + s, y, x + 2*e + s, y, x + 2*e + s, y + e, x + 2*e + s/2., y + 2*e + s, x + e + s/2., y + 2*e + s, x + e + s/2., y + e + s], 									#10
	[x + s/2., y + 2*e + s, x + e + s/2., y + 2*e + s, x + e + s/2., y + 3*e + s, x + e, y + 4*e + 2*s, x, y + 4*e + 2*s, x, y + 3*e + 2*s], 								#11
	[x + s/2., y + 3*e + s, x + e + s/2., y + 2*e + s, x + 2*e + s/2., y + 3*e + s, x + 2*e + s/2., y + 3*e + 2*s, x + e + s/2., y + 4*e + 2*s, x + s/2., y + 3*e + 2*s], 	#12
	[x + e + s/2., y + 3*e + s, x + e + s/2., y + 2*e + s, x + 2*e + s/2., y + 2*e + s, x + 2*e + s, y + 3*e + 2*s, x + 2*e + s, y + 4*e + 2*s, x + e + s, y + 4*e + 2*s] 	#13
]

description = { \
	'A': [0, 1, 2, 4, 5, 6, 7], 
	'B': [9, 12, 0, 2, 3, 6, 7], 
	'C': [0, 3, 4, 5], 
	'D': [9, 12, 0, 3, 6, 7], 
	'E': [0, 1, 2, 3, 4, 5], 
	'F': [0, 1, 2, 4, 5], 
	'G': [0, 2, 3, 4, 5, 7], 
	'H': [1, 2, 4, 5, 6, 7],
	'I': [9, 12, 0, 3], 
	'J': [3, 5, 6, 7],
	'K': [1, 4, 5, 10, 13],
	'L': [3, 4, 5],
	'M': [8, 10, 4, 5, 6, 7], 
	'N': [8, 13, 4, 5, 6, 7],
	'O': [0, 3, 4, 5, 6, 7],
	'P': [0, 1, 2, 4, 5, 6], 
	'Q': [13, 0, 3, 4, 5, 6, 7],
	'R': [13, 0, 1, 4, 5, 6, 2],
	'S': [8, 0, 2, 7, 3], 
	'T': [9, 12, 0], 
	'U': [3, 4, 5, 6, 7], 
	'V': [10, 11, 4, 5],
	'W': [11, 13, 4, 5, 7, 6],
	'X': [8, 13, 10, 11], 
	'Y': [8, 10, 12],
	'Z': [10, 11, 3, 0],
	'0' : [0,4,5,3,7,6],
	'1' : [10,6,7],
	'2' : [0,6,2,1,5,3],
	'3' : [0,6,7,3,2],
	'4' : [4,1,2,6,7],
	'5' : [0,4,1,2,7,3],
	'6' : [0,4,1,2,5,3,7],
	'7' : [10,12,0],
	'8' : [0,1,2,3,4,5,6,7],
	'9' : [0,4,1,2,6,7],
	'*' : [11,10,8,13,9,12],
	'+' : [1,2,9,12],
	'-' : [1,2],
	'=' : [1,2,3],
	'/' : [11,10],
	'>' : [8,11],
	'<' : [13,10],
	',' : [11],
	'.' : [11],
	"'" : [10]
}

# FONCTION

def dessine(mot):
	global description, segments, decal, ep, remplissage, bordure, offset
	for K in str(mot).upper() :
		les_segments = description [K]	# les segments pour chaque caractere
		for SG in les_segments :
			S = segments [SG]	# les coordonnees pour chaque segment
			X1 = repr(S [0] + decal) ; Y1 = repr(S [1])	# maintenant, translate les abscisses
			X2 = repr(S [2] + decal) ; Y2 = repr(S [3])
			X3 = repr(S [4] + decal) ; Y3 = repr(S [5]) 
			X4 = repr(S [6] + decal) ; Y4 = repr(S [7]) 
			X5 = repr(S [8] + decal) ; Y5 = repr(S [9]) 
			X6 = repr(S [10] + decal) ; Y6 = repr(S [11])
			args = '%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s' % (X1, Y1, X2, Y2, X3, Y3, X4, Y4, X5, Y5, X6, Y6)
			args += ', width=%s, outline=%s, fill=%s' % (bord, bordure, remplissage)
			eval('canevas.create_polygon(%s)' % args)
		decal += offset


# DESSIN DES SEGMENTS

top = Tk()
top.title('LCD -- (zoom : %d%%)' % (100+zoom))

canevas = Canvas(top, height=50 + coef_h, width=coef_w)
canevas.pack()
dessine(mot)

top.mainloop()
